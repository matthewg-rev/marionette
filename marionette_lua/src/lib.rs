pub mod lua_binary;
pub mod cfg;
use marionette_core::byte_stream::{ByteStream, ByteStreamRead, ByteStreamWrite};

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn lua_deserialization_tests() {
        let raw_file = vec![
            0x1b, 0x4c, 0x75, 0x61, 0x51, 0x00, 0x01, 0x04, 0x04, 0x04, 0x08, 0x00,
            0x3c, 0x00, 0x00, 0x00, 0x40, 0x43, 0x3a, 0x5c, 0x55, 0x73, 0x65, 0x72,
            0x73, 0x5c, 0x4d, 0x61, 0x74, 0x74, 0x47, 0x5c, 0x4f, 0x6e, 0x65, 0x44,
            0x72, 0x69, 0x76, 0x65, 0x5c, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
            0x5c, 0x6d, 0x61, 0x72, 0x69, 0x6f, 0x6e, 0x65, 0x74, 0x74, 0x65, 0x5f,
            0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x73, 0x72, 0x63, 0x2e,
            0x6c, 0x75, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x08, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x4e, 0x40, 0x40, 0x00, 0x81, 0x00, 0x00, 0x00, 0xc1, 0x80, 0x00, 0x00,
            0x01, 0x01, 0x00, 0x00, 0xa0, 0x80, 0x00, 0x80, 0x85, 0xc1, 0x00, 0x00,
            0xc0, 0x01, 0x80, 0x02, 0x9c, 0x41, 0x00, 0x01, 0x9f, 0xc0, 0xfe, 0x7f,
            0x17, 0x40, 0x00, 0x00, 0x16, 0xc0, 0x00, 0x80, 0x85, 0xc0, 0x00, 0x00,
            0xc1, 0x00, 0x01, 0x00, 0x9c, 0x40, 0x00, 0x01, 0x16, 0x80, 0x00, 0x80,
            0x85, 0xc0, 0x00, 0x00, 0xc1, 0x40, 0x01, 0x00, 0x9c, 0x40, 0x00, 0x01,
            0x85, 0xc0, 0x00, 0x00, 0xc1, 0x80, 0x01, 0x00, 0x9c, 0x40, 0x00, 0x01,
            0x1e, 0x00, 0x80, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xf0, 0x3f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x04,
            0x06, 0x00, 0x00, 0x00, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00, 0x04, 0x0e,
            0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x57, 0x6f,
            0x72, 0x6c, 0x64, 0x21, 0x00, 0x04, 0x14, 0x00, 0x00, 0x00, 0x4e, 0x6f,
            0x74, 0x20, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c,
            0x64, 0x20, 0x3e, 0x3a, 0x28, 0x00, 0x04, 0x0e, 0x00, 0x00, 0x00, 0x48,
            0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x61, 0x6e, 0x79, 0x77, 0x61, 0x79, 0x73,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
            0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
            0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
            0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00,
            0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00,
            0x00, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x78, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x79, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00,
            0x00, 0x0c, 0x00, 0x00, 0x00, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e,
            0x64, 0x65, 0x78, 0x29, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
            0x00, 0x0c, 0x00, 0x00, 0x00, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x69,
            0x6d, 0x69, 0x74, 0x29, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,
            0x00, 0x0b, 0x00, 0x00, 0x00, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74,
            0x65, 0x70, 0x29, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x69, 0x00, 0x06, 0x00, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ];

        let mut stream = ByteStream::new(raw_file.clone());
        let result = lua_binary::LuaBinary::read(&mut stream);
        assert!(result.is_ok());
        let result = result.unwrap();
        let binary = result.clone();

        let mut stream = ByteStream::new(vec![]);
        let result = lua_binary::LuaBinary::write(&result, &mut stream);
        assert!(result.is_ok());
        assert_eq!(stream.remaining(), raw_file);

        for function in binary.functions {
            let graph = cfg::get_graph(function.clone());
        }
    }
}
